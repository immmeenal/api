#Diffie-Hellman key exchange algorithm using APIs.

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import dh

# Generate Diffie-Hellman parameters
parameters = dh.generate_parameters(generator=2, key_size=2048, backend=default_backend())

# Generate Alice's key pair
alice_private_key = parameters.generate_private_key()
alice_public_key = alice_private_key.public_key()

# Generate Bob's key pair
bob_private_key = parameters.generate_private_key()
bob_public_key = bob_private_key.public_key()

# Perform key exchange
shared_key_alice = alice_private_key.exchange(bob_public_key)
shared_key_bob = bob_private_key.exchange(alice_public_key)

# Verify that both Alice and Bob computed the same shared key
assert shared_key_alice == shared_key_bob

# Print keys
print("private key (alice):", alice_private_key.private_numbers().x)
print("public key (alice):", alice_public_key.public_numbers().y)

print("private key (bob):", bob_private_key.private_numbers().x)
print("public key (bob):", bob_public_key.public_numbers().y)

print("Shared key:", shared_key_alice.hex())
